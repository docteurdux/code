package dux.org.springframework.expression.spel.standard;

import org.junit.Test;
import org.springframework.asm.ClassWriter;
import org.springframework.asm.MethodVisitor;
import org.springframework.asm.Opcodes;
import org.springframework.expression.spel.CodeFlow;
import org.springframework.expression.spel.ast.BooleanLiteral;
import org.springframework.expression.spel.ast.SpelNodeImpl;
import org.springframework.expression.spel.standard.SpelCompiler;

import com.github.docteurdux.test.AbstractTest;
import com.github.docteurdux.test.Topic;

@Topic(SpelCompiler.class)
public class SpelCompilerTest extends AbstractTest {
	@Test
	public void test() {

		SpelNodeImpl expression = new BooleanLiteral("true", 1, true);
		byte[] bytes = generateExpressionClassBytes(expression);

		aeq("spel/Ex1", new String(bytes(0x73, 0x70, 0x65, 0x6C, 0x2F, 0x45, 0x78, 0x31)));

		aeq("org/springframework/expression/spel/CompiledExpression",
				new String(bytes(0x6F, 0x72, 0x67, 0x2F, 0x73, 0x70, 0x72, 0x69, 0x6E, 0x67, 0x66, 0x72, 0x61, 0x6D,
						0x65, 0x77, 0x6F, 0x72, 0x6B, 0x2F, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6F, 0x6E,
						0x2F, 0x73, 0x70, 0x65, 0x6C, 0x2F, 0x43, 0x6F, 0x6D, 0x70, 0x69, 0x6C, 0x65, 0x64, 0x45, 0x78,
						0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6F, 0x6E)));

		aeq("<init>", new String(bytes(0x3C, 0x69, 0x6E, 0x69, 0x74, 0x3E)));

		aeq("()V", new String(bytes(0x28, 0x29, 0x56)));

		aeq("getValue", new String(bytes(0x67, 0x65, 0x74, 0x56, 0x61, 0x6C, 0x75, 0x65)));

		aeq("(Ljava/lang/Object;Lorg/springframework/expression/EvaluationContext;)Ljava/lang/Object;",
				new String(bytes(0x28, 0x4C, 0x6A, 0x61, 0x76, 0x61, 0x2F, 0x6C, 0x61, 0x6E, 0x67, 0x2F, 0x4F, 0x62,
						0x6A, 0x65, 0x63, 0x74, 0x3B, 0x4C, 0x6F, 0x72, 0x67, 0x2F, 0x73, 0x70, 0x72, 0x69, 0x6E, 0x67,
						0x66, 0x72, 0x61, 0x6D, 0x65, 0x77, 0x6F, 0x72, 0x6B, 0x2F, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73,
						0x73, 0x69, 0x6F, 0x6E, 0x2F, 0x45, 0x76, 0x61, 0x6C, 0x75, 0x61, 0x74, 0x69, 0x6F, 0x6E, 0x43,
						0x6F, 0x6E, 0x74, 0x65, 0x78, 0x74, 0x3B, 0x29, 0x4C, 0x6A, 0x61, 0x76, 0x61, 0x2F, 0x6C, 0x61,
						0x6E, 0x67, 0x2F, 0x4F, 0x62, 0x6A, 0x65, 0x63, 0x74, 0x3B)));

		aeq("org/springframework/expression/EvaluationException",
				new String(bytes(0x6F, 0x72, 0x67, 0x2F, 0x73, 0x70, 0x72, 0x69, 0x6E, 0x67, 0x66, 0x72, 0x61, 0x6D,
						0x65, 0x77, 0x6F, 0x72, 0x6B, 0x2F, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6F, 0x6E,
						0x2F, 0x45, 0x76, 0x61, 0x6C, 0x75, 0x61, 0x74, 0x69, 0x6F, 0x6E, 0x45, 0x78, 0x63, 0x65, 0x70,
						0x74, 0x69, 0x6F, 0x6E)));

		aeq("java/lang/Boolean", new String(bytes(0x6A, 0x61, 0x76, 0x61, 0x2F, 0x6C, 0x61, 0x6E, 0x67, 0x2F, 0x42,
				0x6F, 0x6F, 0x6C, 0x65, 0x61, 0x6E)));

		aeq("valueOf", new String(bytes(0x76, 0x61, 0x6C, 0x75, 0x65, 0x4F, 0x66)));

		aeq("(Z)Ljava/lang/Boolean;", new String(bytes(0x28, 0x5A, 0x29, 0x4C, 0x6A, 0x61, 0x76, 0x61, 0x2F, 0x6C, 0x61,
				0x6E, 0x67, 0x2F, 0x42, 0x6F, 0x6F, 0x6C, 0x65, 0x61, 0x6E, 0x3B)));

		aeq("Code", new String(bytes(0x43, 0x6F, 0x64, 0x65)));

		aeq("Exceptions", new String(bytes(0x45, 0x78, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6F, 0x6E, 0x73)));

		aeq("", new String(bytes()));
		aeq("", new String(bytes()));
		aeq("", new String(bytes()));
		aeq("", new String(bytes()));
		aeq("", new String(bytes()));
		aeq("", new String(bytes()));
		aeq("", new String(bytes()));
		aeq("", new String(bytes()));

		baeq(bytes,

				/*- magic */
				0xCA, 0xFE, 0xBA, 0xBE,

				/*- version */
				0x00, 0x00, 0x00, 0x31,

				/*- constant pool count */
				0x00, 0x16,

				/*- 1 : "spel/Ex1" */
				0x01, 0x00, 0x08, 0x73, 0x70, 0x65, 0x6C, 0x2F, 0x45, 0x78, 0x31,

				/*- 2 : class "spel/Ex1" */
				0x07, 0x00, 0x01,

				/*- 3 : "org/springframework/expression/spel/CompiledExpression" */
				0x01, 0x00, 0x36, 0x6F, 0x72, 0x67, 0x2F, 0x73, 0x70, 0x72, 0x69, 0x6E, 0x67, 0x66, 0x72, 0x61, 0x6D,
				0x65, 0x77, 0x6F, 0x72, 0x6B, 0x2F, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6F, 0x6E, 0x2F,
				0x73, 0x70, 0x65, 0x6C, 0x2F, 0x43, 0x6F, 0x6D, 0x70, 0x69, 0x6C, 0x65, 0x64, 0x45, 0x78, 0x70, 0x72,
				0x65, 0x73, 0x73, 0x69, 0x6F, 0x6E,

				/*- 4 : class "org/springframework/expression/spel/CompiledExpression" */
				0x07, 0x00, 0x03,

				/*- 5 : "<init>" */
				0x01, 0x00, 0x06, 0x3C, 0x69, 0x6E, 0x69, 0x74, 0x3E,

				/*- 6 : "()V" */
				0x01, 0x00, 0x03, 0x28, 0x29, 0x56,

				/*- 7: named type <init> ()V */
				0x0C, 0x00, 0x05, 0x00, 0x06,

				/*- 8 : Method class "org/springframework/expression/spel/CompiledExpression" named type <init> ()V */
				0x0A, 0x00, 0x04, 0x00, 0x07,

				/*- 9 : "getValue" */
				0x01, 0x00, 0x08, 0x67, 0x65, 0x74, 0x56, 0x61, 0x6C, 0x75, 0x65,

				/*- 10 : "(Ljava/lang/Object;Lorg/springframework/expression/EvaluationContext;)Ljava/lang/Object;" */
				0x01, 0x00, 0x58, 0x28, 0x4C, 0x6A, 0x61, 0x76, 0x61, 0x2F, 0x6C, 0x61, 0x6E, 0x67, 0x2F, 0x4F, 0x62,
				0x6A, 0x65, 0x63, 0x74, 0x3B, 0x4C, 0x6F, 0x72, 0x67, 0x2F, 0x73, 0x70, 0x72, 0x69, 0x6E, 0x67, 0x66,
				0x72, 0x61, 0x6D, 0x65, 0x77, 0x6F, 0x72, 0x6B, 0x2F, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69,
				0x6F, 0x6E, 0x2F, 0x45, 0x76, 0x61, 0x6C, 0x75, 0x61, 0x74, 0x69, 0x6F, 0x6E, 0x43, 0x6F, 0x6E, 0x74,
				0x65, 0x78, 0x74, 0x3B, 0x29, 0x4C, 0x6A, 0x61, 0x76, 0x61, 0x2F, 0x6C, 0x61, 0x6E, 0x67, 0x2F, 0x4F,
				0x62, 0x6A, 0x65, 0x63, 0x74, 0x3B,

				/*- 11 : "org/springframework/expression/EvaluationException" */
				0x01, 0x00, 0x32, 0x6F, 0x72, 0x67, 0x2F, 0x73, 0x70, 0x72, 0x69, 0x6E, 0x67, 0x66, 0x72, 0x61, 0x6D,
				0x65, 0x77, 0x6F, 0x72, 0x6B, 0x2F, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6F, 0x6E, 0x2F,
				0x45, 0x76, 0x61, 0x6C, 0x75, 0x61, 0x74, 0x69, 0x6F, 0x6E, 0x45, 0x78, 0x63, 0x65, 0x70, 0x74, 0x69,
				0x6F, 0x6E,

				/*- 12 : class org/springframework/expression/EvaluationException */
				0x07, 0x00, 0x0B,

				/*- 13 : int 1 */
				0x03, 0x00, 0x00, 0x00, 0x01,

				/*- 14 : "java/lang/Boolean" */
				0x01, 0x00, 0x11, 0x6A, 0x61, 0x76, 0x61, 0x2F, 0x6C, 0x61, 0x6E, 0x67, 0x2F, 0x42, 0x6F, 0x6F, 0x6C,
				0x65, 0x61, 0x6E,

				/*- 15 : */
				0x07, 0x00, 0x0E,

				/*- 16 : "valueOf" */
				0x01, 0x00, 0x07, 0x76, 0x61, 0x6C, 0x75, 0x65, 0x4F, 0x66,

				/*- 17 : "(Z)Ljava/lang/Boolean;" */
				0x01, 0x00, 0x16, 0x28, 0x5A, 0x29, 0x4C, 0x6A, 0x61, 0x76, 0x61, 0x2F, 0x6C, 0x61, 0x6E, 0x67, 0x2F,
				0x42, 0x6F, 0x6F, 0x6C, 0x65, 0x61, 0x6E, 0x3B,

				/*- 18 : */
				0x0C, 0x00, 0x10, 0x00, 0x11,

				/*- 19 : */
				0x0A, 0x00, 0x0F, 0x00, 0x12,

				/*- 20 : "Code" */
				0x01, 0x00, 0x04, 0x43, 0x6F, 0x64, 0x65,

				/*- 21 : "Exceptions" */
				0x01, 0x00, 0x0A, 0x45, 0x78, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6F, 0x6E, 0x73,

				/*- mask */
				0x00, 0x01,

				/*- name */
				0x00, 0x02,

				/*- super name */
				0x00, 0x04,

				/*- interface count */
				0x00, 0x00,

				/*- number of fields */
				0x00, 0x00,

				/*- number of methods */
				0x00, 0x02,

				/*- method mask */
				0x00, 0x01,

				/*- method name */
				0x00, 0x05,

				/*- method desc */
				0x00, 0x06,

				/*- attribute count */
				0x00, 0x01,

				/*- Reference to "Code" */
				0x00, 0x14,

				/*- Code size */
				0x00, 0x00, 0x00, 0x11,

				/*- Max stack */
				0x00, 0x01,

				/*- max locals */
				0x00, 0x01,

				/*- Code length */
				0x00, 0x00, 0x00, 0x05,

				/*- Code bytes */
				0x2A, 0xB7, 0x00, 0x08, 0xB1,

				/* Handler count */
				0x00, 0x00,

				/*- attribute count */
				0x00, 0x00,

				/* mask */
				0x00, 0x01,

				/* name */
				0x00, 0x09,

				/* desc */
				0x00, 0x0A,

				/*- attribute count */
				0x00, 0x02,

				/* Reference to "Code" */
				0x00, 0x14,

				/* Code size */
				0x00, 0x00, 0x00, 0x12,

				/* Max stack */
				0x00, 0x01,

				/* Max locals */
				0x00, 0x03,

				/* Code length */
				0x00, 0x00, 0x00, 0x06,

				/* Actual code */
				0x12, 0x0D, 0xB8, 0x00, 0x13, 0xB0,

				0x00, 0x00, 0x00, 0x00, 0x00, 0x15, 0x00, 0x00, 0x00, 0x04, 0x00, 0x01, 0x00, 0x0C, 0x00, 0x00);
		baeqEnd(bytes);
	}

	// duplicate expression class generation code to access the generated bytes
	public static byte[] generateExpressionClassBytes(SpelNodeImpl expr) {

		String className = "spel/Ex1";
		int flags = ClassWriter.COMPUTE_MAXS | ClassWriter.COMPUTE_FRAMES;
		ClassWriter cw = new ClassWriter(flags);
		String superClassName = "org/springframework/expression/spel/CompiledExpression";
		cw.visit(Opcodes.V1_5, Opcodes.ACC_PUBLIC, className, null, superClassName, null);

		MethodVisitor mv = cw.visitMethod(Opcodes.ACC_PUBLIC, "<init>", "()V", null, null);
		mv.visitCode();
		mv.visitVarInsn(Opcodes.ALOAD, 0);
		mv.visitMethodInsn(Opcodes.INVOKESPECIAL, superClassName, "<init>", "()V", false);
		mv.visitInsn(Opcodes.RETURN);
		mv.visitMaxs(1, 1);
		mv.visitEnd();

		String signature = "(Ljava/lang/Object;Lorg/springframework/expression/EvaluationContext;)Ljava/lang/Object;";
		String EVALUATION_EXCEPTION = "org/springframework/expression/EvaluationException";
		mv = cw.visitMethod(Opcodes.ACC_PUBLIC, "getValue", signature, null, new String[] { EVALUATION_EXCEPTION });
		mv.visitCode();

		CodeFlow cf = new CodeFlow(className, cw);
		expr.generateCode(mv, cf);

		CodeFlow.insertBoxIfNecessary(mv, cf.lastDescriptor());
		if ("V".equals(cf.lastDescriptor())) {
			mv.visitInsn(Opcodes.ACONST_NULL);
		}
		mv.visitInsn(Opcodes.ARETURN);

		mv.visitMaxs(0, 0);
		mv.visitEnd();
		cw.visitEnd();

		cf.finish();

		return cw.toByteArray();
	}

}
