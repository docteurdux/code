package dud.java.sql;

import java.io.InputStream;
import java.io.Reader;
import java.math.BigDecimal;
import java.net.URL;
import java.sql.Array;
import java.sql.Blob;
import java.sql.CallableStatement;
import java.sql.Clob;
import java.sql.Connection;
import java.sql.Date;
import java.sql.NClob;
import java.sql.ParameterMetaData;
import java.sql.Ref;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.RowId;
import java.sql.SQLException;
import java.sql.SQLWarning;
import java.sql.SQLXML;
import java.sql.Time;
import java.sql.Timestamp;
import java.util.Calendar;
import java.util.Map;

import com.github.docteurdux.test.Delegating;
import com.github.docteurdux.test.TestEvents;

public class DelegatingCallableStatement implements Delegating, CallableStatement {

	private CallableStatement delegate;

	public DelegatingCallableStatement(CallableStatement delegate) {
		this.delegate = delegate;
	}

	@Override
	public Object getTestDelegate() {
		return delegate;
	}

	@Override
	public ResultSet executeQuery(String sql) throws SQLException {
		return TestEvents.record(delegate, "executeQuery", sql).result(delegate.executeQuery(sql));
	}

	@Override
	public int executeUpdate(String sql) throws SQLException {
		return TestEvents.record(delegate, "executeUpdate", sql).result(delegate.executeUpdate(sql));
	}

	@Override
	public int getMaxFieldSize() throws SQLException {
		return TestEvents.record(delegate, "getMaxFieldSize").result(delegate.getMaxFieldSize());
	}

	@Override
	public void setMaxFieldSize(int max) throws SQLException {
		TestEvents.record(delegate, "setMaxFieldSize", max);
		delegate.setMaxFieldSize(max);

	}

	@Override
	public int getMaxRows() throws SQLException {
		return TestEvents.record(delegate, "getMaxRows").result(delegate.getMaxRows());
	}

	@Override
	public void setMaxRows(int max) throws SQLException {
		TestEvents.record(delegate, "setMaxRows", max);
		delegate.setMaxRows(max);

	}

	@Override
	public void setEscapeProcessing(boolean enable) throws SQLException {
		TestEvents.record(delegate, "setEscapeProcessing", enable);
		delegate.setEscapeProcessing(enable);

	}

	@Override
	public int getQueryTimeout() throws SQLException {
		return TestEvents.record(delegate, "getQueryTimeout").result(delegate.getQueryTimeout());
	}

	@Override
	public void setQueryTimeout(int seconds) throws SQLException {
		TestEvents.record(delegate, "setQueryTimeout", seconds);
		delegate.setQueryTimeout(seconds);

	}

	@Override
	public void cancel() throws SQLException {
		TestEvents.record(delegate, "cancel");
		delegate.cancel();

	}

	@Override
	public void setCursorName(String name) throws SQLException {
		TestEvents.record(delegate, "setCursorName", name);
		delegate.setCursorName(name);

	}

	@Override
	public boolean execute(String sql) throws SQLException {
		return TestEvents.record(delegate, "execute", sql).result(delegate.execute(sql));
	}

	@Override
	public ResultSet getResultSet() throws SQLException {
		return TestEvents.record(delegate, "getResultSet").result(delegate.getResultSet());
	}

	@Override
	public int getUpdateCount() throws SQLException {
		return TestEvents.record(delegate, "getUpdateCount").result(delegate.getUpdateCount());
	}

	@Override
	public boolean getMoreResults() throws SQLException {
		return TestEvents.record(delegate, "getMoreResults").result(delegate.getMoreResults());
	}

	@Override
	public int getResultSetConcurrency() throws SQLException {
		return TestEvents.record(delegate, "getResultSetConcurrency").result(delegate.getResultSetConcurrency());
	}

	@Override
	public int getResultSetType() throws SQLException {
		return TestEvents.record(delegate, "getResultSetType").result(delegate.getResultSetType());
	}

	@Override
	public void addBatch(String sql) throws SQLException {
		TestEvents.record(delegate, "addBatch", sql);
		delegate.addBatch(sql);
	}

	@Override
	public void clearBatch() throws SQLException {
		TestEvents.record(delegate, "clearBatch");
		delegate.clearBatch();
	}

	@Override
	public int[] executeBatch() throws SQLException {
		return TestEvents.record(delegate, "executeBatch").result(delegate.executeBatch());
	}

	@Override
	public Connection getConnection() throws SQLException {
		return TestEvents.record(delegate, "getConnection").result(delegate.getConnection());
	}

	@Override
	public boolean getMoreResults(int current) throws SQLException {
		return TestEvents.record(delegate, "getMoreResults", current).result(delegate.getMoreResults(current));
	}

	@Override
	public ResultSet getGeneratedKeys() throws SQLException {
		return TestEvents.record(delegate, "getGeneratedKeys").result(delegate.getGeneratedKeys());
	}

	@Override
	public int executeUpdate(String sql, int autoGeneratedKeys) throws SQLException {
		return TestEvents.record(delegate, "executeUpdate", sql, autoGeneratedKeys)
				.result(delegate.executeUpdate(sql, autoGeneratedKeys));
	}

	@Override
	public int executeUpdate(String sql, int[] columnIndexes) throws SQLException {
		return TestEvents.record(delegate, "executeUpdate", sql, columnIndexes)
				.result(delegate.executeUpdate(sql, columnIndexes));
	}

	@Override
	public int executeUpdate(String sql, String[] columnNames) throws SQLException {
		return TestEvents.record(delegate, "executeUpdate", sql, columnNames)
				.result(delegate.executeUpdate(sql, columnNames));
	}

	@Override
	public boolean execute(String sql, int autoGeneratedKeys) throws SQLException {
		return TestEvents.record(delegate, "execute", sql, autoGeneratedKeys)
				.result(delegate.execute(sql, autoGeneratedKeys));
	}

	@Override
	public boolean execute(String sql, int[] columnIndexes) throws SQLException {
		return TestEvents.record(delegate, "execute", sql, columnIndexes).result(delegate.execute(sql, columnIndexes));
	}

	@Override
	public boolean execute(String sql, String[] columnNames) throws SQLException {
		return TestEvents.record(delegate, "execute", sql, columnNames).result(delegate.execute(sql, columnNames));
	}

	@Override
	public int getResultSetHoldability() throws SQLException {
		return TestEvents.record(delegate, "getResultSetHoldability").result(delegate.getResultSetHoldability());
	}

	@Override
	public void setPoolable(boolean poolable) throws SQLException {
		TestEvents.record(delegate, "setPoolable", poolable);
		delegate.setPoolable(poolable);
	}

	@Override
	public boolean isPoolable() throws SQLException {
		return TestEvents.record(delegate, "isPoolable").result(delegate.isPoolable());
	}

	@Override
	public void closeOnCompletion() throws SQLException {
		TestEvents.record(delegate, "closeOnCompletion");
		delegate.closeOnCompletion();
	}

	@Override
	public boolean isCloseOnCompletion() throws SQLException {
		return TestEvents.record(delegate, "isCloseOnCompletion").result(delegate.isCloseOnCompletion());
	}

	@Override
	public ResultSet executeQuery() throws SQLException {
		return TestEvents.record(delegate, "executeQuery").result(new DelegatingResultSet(delegate.executeQuery()));
	}

	@Override
	public int executeUpdate() throws SQLException {
		return TestEvents.record(delegate, "executeUpdate").result(delegate.executeUpdate());
	}

	@Override
	public void setNull(int parameterIndex, int sqlType) throws SQLException {
		TestEvents.record(delegate, "setNull", parameterIndex, sqlType);
		delegate.setNull(parameterIndex, sqlType);
	}

	@Override
	public void setBoolean(int parameterIndex, boolean x) throws SQLException {
		TestEvents.record(delegate, "setBoolean", parameterIndex, x);
		delegate.setBoolean(parameterIndex, x);
	}

	@Override
	public void setByte(int parameterIndex, byte x) throws SQLException {
		TestEvents.record(delegate, "setByte", parameterIndex, x);
		delegate.setByte(parameterIndex, x);
	}

	@Override
	public void setShort(int parameterIndex, short x) throws SQLException {
		TestEvents.record(delegate, "setShort", parameterIndex, x);
		delegate.setShort(parameterIndex, x);
	}

	@Override
	public void setInt(int parameterIndex, int x) throws SQLException {
		TestEvents.record(delegate, "setInt", parameterIndex, x);
		delegate.setInt(parameterIndex, x);
	}

	@Override
	public void setLong(int parameterIndex, long x) throws SQLException {
		TestEvents.record(delegate, "setLong", parameterIndex, x);
		delegate.setLong(parameterIndex, x);
	}

	@Override
	public void setFloat(int parameterIndex, float x) throws SQLException {
		TestEvents.record(delegate, "setFloat", parameterIndex, x);
		delegate.setFloat(parameterIndex, x);
	}

	@Override
	public void setDouble(int parameterIndex, double x) throws SQLException {
		TestEvents.record(delegate, "setDouble", parameterIndex, x);
		delegate.setDouble(parameterIndex, x);
	}

	@Override
	public void setBigDecimal(int parameterIndex, BigDecimal x) throws SQLException {
		TestEvents.record(delegate, "setBigDecimal", parameterIndex, x);
		delegate.setBigDecimal(parameterIndex, x);
	}

	@Override
	public void setString(int parameterIndex, String x) throws SQLException {
		TestEvents.record(delegate, "setString", parameterIndex, x);
		delegate.setString(parameterIndex, x);
	}

	@Override
	public void setBytes(int parameterIndex, byte[] x) throws SQLException {
		TestEvents.record(delegate, "setBytes", parameterIndex, x);
		delegate.setBytes(parameterIndex, x);
	}

	@Override
	public void setDate(int parameterIndex, Date x) throws SQLException {
		TestEvents.record(delegate, "setDate", parameterIndex, x);
		delegate.setDate(parameterIndex, x);
	}

	@Override
	public void setTime(int parameterIndex, Time x) throws SQLException {
		TestEvents.record(delegate, "setTime", parameterIndex, x);
		delegate.setTime(parameterIndex, x);
	}

	@Override
	public void setTimestamp(int parameterIndex, Timestamp x) throws SQLException {
		TestEvents.record(delegate, "setTimestamp", parameterIndex, x);
		delegate.setTimestamp(parameterIndex, x);
	}

	@Override
	public void setAsciiStream(int parameterIndex, InputStream x, int length) throws SQLException {
		TestEvents.record(delegate, "setAsciiStream", parameterIndex, x, length);
		delegate.setAsciiStream(parameterIndex, x, length);
	}

	@Override
	@SuppressWarnings("deprecation")
	public void setUnicodeStream(int parameterIndex, InputStream x, int length) throws SQLException {
		TestEvents.record(delegate, "setUnicodeStream", parameterIndex, x, length);
		delegate.setUnicodeStream(parameterIndex, x, length);
	}

	@Override
	public void setBinaryStream(int parameterIndex, InputStream x, int length) throws SQLException {
		TestEvents.record(delegate, "setBinaryStream", parameterIndex, x, length);
		delegate.setBinaryStream(parameterIndex, x, length);
	}

	@Override
	public void clearParameters() throws SQLException {
		TestEvents.record(delegate, "clearParameters");
		delegate.clearParameters();
	}

	@Override
	public void setObject(int parameterIndex, Object x, int targetSqlType) throws SQLException {
		TestEvents.record(delegate, "setObject", parameterIndex, x, targetSqlType);
		delegate.setObject(parameterIndex, x, targetSqlType);
	}

	@Override
	public void setObject(int parameterIndex, Object x) throws SQLException {
		TestEvents.record(delegate, "setObject", parameterIndex, x);
		delegate.setObject(parameterIndex, x);
	}

	@Override
	public boolean execute() throws SQLException {
		return TestEvents.record(delegate, "execute").result(delegate.execute());
	}

	@Override
	public void addBatch() throws SQLException {
		TestEvents.record(delegate, "addBatch");
		delegate.addBatch();
	}

	@Override
	public void setCharacterStream(int parameterIndex, Reader reader, int length) throws SQLException {
		TestEvents.record(delegate, "setCharacterStream", parameterIndex, reader, length);
		delegate.setCharacterStream(parameterIndex, reader, length);

	}

	@Override
	public void setRef(int parameterIndex, Ref x) throws SQLException {
		TestEvents.record(delegate, "setRef", parameterIndex, x);
		delegate.setRef(parameterIndex, x);
	}

	@Override
	public void setBlob(int parameterIndex, Blob x) throws SQLException {
		TestEvents.record(delegate, "setBlob", parameterIndex, x);
		delegate.setBlob(parameterIndex, x);
	}

	@Override
	public void setClob(int parameterIndex, Clob x) throws SQLException {
		TestEvents.record(delegate, "setClob", parameterIndex, x);
		delegate.setClob(parameterIndex, x);
	}

	@Override
	public void setArray(int parameterIndex, Array x) throws SQLException {
		TestEvents.record(delegate, "setArray", parameterIndex, x);
		delegate.setArray(parameterIndex, x);
	}

	@Override
	public void setDate(int parameterIndex, Date x, Calendar cal) throws SQLException {
		TestEvents.record(delegate, "setDate", parameterIndex, x, cal);
		delegate.setDate(parameterIndex, x, cal);
	}

	@Override
	public void setTime(int parameterIndex, Time x, Calendar cal) throws SQLException {
		TestEvents.record(delegate, "setTime", parameterIndex, x, cal);
		delegate.setTime(parameterIndex, x, cal);

	}

	@Override
	public void setTimestamp(int parameterIndex, Timestamp x, Calendar cal) throws SQLException {
		TestEvents.record(delegate, "setTimestamp", parameterIndex, x, cal);
		delegate.setTimestamp(parameterIndex, x, cal);
	}

	@Override
	public void setNull(int parameterIndex, int sqlType, String typeName) throws SQLException {
		TestEvents.record(delegate, "setNull", parameterIndex, sqlType, typeName);
		delegate.setNull(parameterIndex, sqlType, typeName);

	}

	@Override
	public void setURL(int parameterIndex, URL x) throws SQLException {
		TestEvents.record(delegate, "setURL", parameterIndex, x);
		delegate.setURL(parameterIndex, x);

	}

	@Override
	public ParameterMetaData getParameterMetaData() throws SQLException {
		return TestEvents.record(delegate, "getParameterMetaData").result(delegate.getParameterMetaData());
	}

	@Override
	public void setRowId(int parameterIndex, RowId x) throws SQLException {
		TestEvents.record(delegate, "setRowId", parameterIndex, x);
		delegate.setRowId(parameterIndex, x);
	}

	@Override
	public void setNString(int parameterIndex, String value) throws SQLException {
		TestEvents.record(delegate, "setNString", parameterIndex, value);
		delegate.setNString(parameterIndex, value);
	}

	@Override
	public void setNCharacterStream(int parameterIndex, Reader value, long length) throws SQLException {
		TestEvents.record(delegate, "setNCharacterStream", parameterIndex, value, length);
		delegate.setNCharacterStream(parameterIndex, value, length);
	}

	@Override
	public void setNClob(int parameterIndex, NClob value) throws SQLException {
		TestEvents.record(delegate, "setNClob", parameterIndex, value);
		delegate.setNClob(parameterIndex, value);
	}

	@Override
	public void setClob(int parameterIndex, Reader reader, long length) throws SQLException {
		TestEvents.record(delegate, "setClob", parameterIndex, reader, length);
		delegate.setClob(parameterIndex, reader, length);
	}

	@Override
	public void setBlob(int parameterIndex, InputStream inputStream, long length) throws SQLException {
		TestEvents.record(delegate, "setBlob", parameterIndex, inputStream, length);
		delegate.setBlob(parameterIndex, inputStream, length);
	}

	@Override
	public void setNClob(int parameterIndex, Reader reader, long length) throws SQLException {
		TestEvents.record(delegate, "setNClob", parameterIndex, reader, length);
		delegate.setNClob(parameterIndex, reader, length);
	}

	@Override
	public void setSQLXML(int parameterIndex, SQLXML xmlObject) throws SQLException {
		TestEvents.record(delegate, "setSQLXML", parameterIndex, xmlObject);
		delegate.setSQLXML(parameterIndex, xmlObject);
	}

	@Override
	public void setObject(int parameterIndex, Object x, int targetSqlType, int scaleOrLength) throws SQLException {
		TestEvents.record(delegate, "setObject", parameterIndex, x, targetSqlType, scaleOrLength);
		delegate.setObject(parameterIndex, x, targetSqlType, scaleOrLength);
	}

	@Override
	public void setAsciiStream(int parameterIndex, InputStream x, long length) throws SQLException {
		TestEvents.record(delegate, "setAsciiStream", parameterIndex, x, length);
		delegate.setAsciiStream(parameterIndex, x, length);
	}

	@Override
	public void setBinaryStream(int parameterIndex, InputStream x, long length) throws SQLException {
		TestEvents.record(delegate, "setBinaryStream", parameterIndex, x, length);
		delegate.setBinaryStream(parameterIndex, x, length);
	}

	@Override
	public void setCharacterStream(int parameterIndex, Reader reader, long length) throws SQLException {
		TestEvents.record(delegate, "setCharacterStream", parameterIndex, reader, length);
		delegate.setCharacterStream(parameterIndex, reader, length);
	}

	@Override
	public void setAsciiStream(int parameterIndex, InputStream x) throws SQLException {
		TestEvents.record(delegate, "setAsciiStream", parameterIndex, x);
		delegate.setAsciiStream(parameterIndex, x);
	}

	@Override
	public void setBinaryStream(int parameterIndex, InputStream x) throws SQLException {
		TestEvents.record(delegate, "setBinaryStream", parameterIndex, x);
		delegate.setBinaryStream(parameterIndex, x);
	}

	@Override
	public void setCharacterStream(int parameterIndex, Reader reader) throws SQLException {
		TestEvents.record(delegate, "setCharacterStream", parameterIndex, reader);
		delegate.setCharacterStream(parameterIndex, reader);
	}

	@Override
	public void setNCharacterStream(int parameterIndex, Reader value) throws SQLException {
		TestEvents.record(delegate, "setNCharacterStream", parameterIndex, value);
		delegate.setNCharacterStream(parameterIndex, value);
	}

	@Override
	public void setClob(int parameterIndex, Reader reader) throws SQLException {
		TestEvents.record(delegate, "setClob", parameterIndex, reader);
		delegate.setClob(parameterIndex, reader);
	}

	@Override
	public void setBlob(int parameterIndex, InputStream inputStream) throws SQLException {
		TestEvents.record(delegate, "setBlob", parameterIndex, inputStream);
		delegate.setBlob(parameterIndex, inputStream);
	}

	@Override
	public void setNClob(int parameterIndex, Reader reader) throws SQLException {
		TestEvents.record(delegate, "setNClob", parameterIndex, reader);
		delegate.setNClob(parameterIndex, reader);
	}

	@Override
	public <T> T unwrap(Class<T> iface) throws SQLException {
		return TestEvents.record(this, "unwrap", iface).result(delegate.unwrap(iface));
	}

	@Override
	public boolean isWrapperFor(Class<?> iface) throws SQLException {
		return TestEvents.record(this, "isWrapperFor", iface).result(delegate.isWrapperFor(iface));
	}

	@Override
	public void close() throws SQLException {
		TestEvents.record(this, "close");
		delegate.close();
	}

	@Override
	public boolean wasNull() throws SQLException {
		return TestEvents.record(this, "wasNull").result(delegate.wasNull());
	}

	@Override
	public String getString(int columnIndex) throws SQLException {
		return TestEvents.record(this, "getString", columnIndex).result(delegate.getString(columnIndex));
	}

	@Override
	public boolean getBoolean(int columnIndex) throws SQLException {
		return TestEvents.record(this, "getBoolean", columnIndex).result(delegate.getBoolean(columnIndex));
	}

	@Override
	public byte getByte(int columnIndex) throws SQLException {
		return TestEvents.record(this, "getByte", columnIndex).result(delegate.getByte(columnIndex));
	}

	@Override
	public short getShort(int columnIndex) throws SQLException {
		return TestEvents.record(this, "getShort", columnIndex).result(delegate.getShort(columnIndex));
	}

	@Override
	public int getInt(int columnIndex) throws SQLException {
		return TestEvents.record(this, "getInt", columnIndex).result(delegate.getInt(columnIndex));
	}

	@Override
	public long getLong(int columnIndex) throws SQLException {
		return TestEvents.record(this, "getLong", columnIndex).result(delegate.getLong(columnIndex));
	}

	@Override
	public float getFloat(int columnIndex) throws SQLException {
		return TestEvents.record(this, "getFloat", columnIndex).result(delegate.getFloat(columnIndex));
	}

	@Override
	public double getDouble(int columnIndex) throws SQLException {
		return TestEvents.record(this, "getDouble", columnIndex).result(delegate.getDouble(columnIndex));
	}

	@Override
	public BigDecimal getBigDecimal(int columnIndex, int scale) throws SQLException {
		return TestEvents.record(this, "getBigDecimal", columnIndex).result(delegate.getBigDecimal(columnIndex));
	}

	@Override
	public byte[] getBytes(int columnIndex) throws SQLException {
		return TestEvents.record(this, "getBytes", columnIndex).result(delegate.getBytes(columnIndex));
	}

	@Override
	public Date getDate(int columnIndex) throws SQLException {
		return TestEvents.record(this, "getDate", columnIndex).result(delegate.getDate(columnIndex));
	}

	@Override
	public Time getTime(int columnIndex) throws SQLException {
		return TestEvents.record(this, "getTime", columnIndex).result(delegate.getTime(columnIndex));
	}

	@Override
	public Timestamp getTimestamp(int columnIndex) throws SQLException {
		return TestEvents.record(this, "getTimestamp", columnIndex).result(delegate.getTimestamp(columnIndex));
	}

	@Override
	public String getString(String columnLabel) throws SQLException {
		return TestEvents.record(this, "getString", columnLabel).result(delegate.getString(columnLabel));
	}

	@Override
	public boolean getBoolean(String columnLabel) throws SQLException {
		return TestEvents.record(this, "getBoolean", columnLabel).result(delegate.getBoolean(columnLabel));
	}

	@Override
	public byte getByte(String columnLabel) throws SQLException {
		return TestEvents.record(this, "getByte", columnLabel).result(delegate.getByte(columnLabel));
	}

	@Override
	public short getShort(String columnLabel) throws SQLException {
		return TestEvents.record(this, "getShort", columnLabel).result(delegate.getShort(columnLabel));
	}

	@Override
	public int getInt(String columnLabel) throws SQLException {
		return TestEvents.record(this, "getInt", columnLabel).result(delegate.getInt(columnLabel));
	}

	@Override
	public long getLong(String columnLabel) throws SQLException {
		return TestEvents.record(this, "getLong", columnLabel).result(delegate.getLong(columnLabel));
	}

	@Override
	public float getFloat(String columnLabel) throws SQLException {
		return TestEvents.record(this, "getFloat", columnLabel).result(delegate.getFloat(columnLabel));
	}

	@Override
	public double getDouble(String columnLabel) throws SQLException {
		return TestEvents.record(this, "getDouble", columnLabel).result(delegate.getDouble(columnLabel));
	}

	@Override
	public byte[] getBytes(String columnLabel) throws SQLException {
		return TestEvents.record(this, "getBytes", columnLabel).result(delegate.getBytes(columnLabel));
	}

	@Override
	public Date getDate(String columnLabel) throws SQLException {
		return TestEvents.record(this, "getDate", columnLabel).result(delegate.getDate(columnLabel));
	}

	@Override
	public Time getTime(String columnLabel) throws SQLException {
		return TestEvents.record(this, "getTime", columnLabel).result(delegate.getTime(columnLabel));
	}

	@Override
	public Timestamp getTimestamp(String columnLabel) throws SQLException {
		return TestEvents.record(this, "getTimestamp", columnLabel).result(delegate.getTimestamp(columnLabel));
	}

	@Override
	public SQLWarning getWarnings() throws SQLException {
		return TestEvents.record(this, "getWarnings").result(delegate.getWarnings());
	}

	@Override
	public void clearWarnings() throws SQLException {
		TestEvents.record(this, "clearWarnings");
		delegate.clearWarnings();
	}

	@Override
	public ResultSetMetaData getMetaData() throws SQLException {
		return TestEvents.record(this, "getMetaData").result(delegate.getMetaData());
	}

	@Override
	public Object getObject(int columnIndex) throws SQLException {
		return TestEvents.record(this, "getObject", columnIndex).result(delegate.getObject(columnIndex));
	}

	@Override
	public Object getObject(String columnLabel) throws SQLException {
		return TestEvents.record(this, "getObject", columnLabel).result(delegate.getObject(columnLabel));
	}

	@Override
	public Reader getCharacterStream(int columnIndex) throws SQLException {
		return TestEvents.record(this, "getCharacterStream", columnIndex)
				.result(delegate.getCharacterStream(columnIndex));
	}

	@Override
	public Reader getCharacterStream(String columnLabel) throws SQLException {
		return TestEvents.record(this, "getCharacterStream", columnLabel)
				.result(delegate.getCharacterStream(columnLabel));
	}

	@Override
	public BigDecimal getBigDecimal(int columnIndex) throws SQLException {
		return TestEvents.record(this, "getBigDecimal", columnIndex).result(delegate.getBigDecimal(columnIndex));
	}

	@Override
	public BigDecimal getBigDecimal(String columnLabel) throws SQLException {
		return TestEvents.record(this, "getBigDecimal", columnLabel).result(delegate.getBigDecimal(columnLabel));
	}

	@Override
	public void setFetchDirection(int direction) throws SQLException {
		TestEvents.record(this, "setFetchDirection", direction);
		delegate.setFetchDirection(direction);
	}

	@Override
	public int getFetchDirection() throws SQLException {
		return TestEvents.record(this, "getFetchDirection").result(delegate.getFetchDirection());
	}

	@Override
	public void setFetchSize(int rows) throws SQLException {
		TestEvents.record(this, "setFetchSize", rows);
		delegate.setFetchSize(rows);
	}

	@Override
	public int getFetchSize() throws SQLException {
		return TestEvents.record(this, "getFetchSize").result(delegate.getFetchSize());
	}

	@Override
	public Object getObject(int columnIndex, Map<String, Class<?>> map) throws SQLException {
		return TestEvents.record(this, "getObject", columnIndex, map).result(delegate.getObject(columnIndex, map));
	}

	@Override
	public Ref getRef(int columnIndex) throws SQLException {
		return TestEvents.record(this, "getRef", columnIndex).result(delegate.getRef(columnIndex));
	}

	@Override
	public Blob getBlob(int columnIndex) throws SQLException {
		return TestEvents.record(this, "getBlob", columnIndex).result(delegate.getBlob(columnIndex));
	}

	@Override
	public Clob getClob(int columnIndex) throws SQLException {
		return TestEvents.record(this, "getClob", columnIndex).result(delegate.getClob(columnIndex));
	}

	@Override
	public Array getArray(int columnIndex) throws SQLException {
		return TestEvents.record(this, "getArray", columnIndex).result(delegate.getArray(columnIndex));
	}

	@Override
	public Object getObject(String columnLabel, Map<String, Class<?>> map) throws SQLException {
		return TestEvents.record(this, "getObject", columnLabel, map).result(delegate.getObject(columnLabel, map));
	}

	@Override
	public Ref getRef(String columnLabel) throws SQLException {
		return TestEvents.record(this, "getRef", columnLabel).result(delegate.getRef(columnLabel));
	}

	@Override
	public Blob getBlob(String columnLabel) throws SQLException {
		return TestEvents.record(this, "getBlob", columnLabel).result(delegate.getBlob(columnLabel));
	}

	@Override
	public Clob getClob(String columnLabel) throws SQLException {
		return TestEvents.record(this, "getClob", columnLabel).result(delegate.getClob(columnLabel));
	}

	@Override
	public Array getArray(String columnLabel) throws SQLException {
		return TestEvents.record(this, "getArray", columnLabel).result(delegate.getArray(columnLabel));
	}

	@Override
	public Date getDate(int columnIndex, Calendar cal) throws SQLException {
		return TestEvents.record(this, "getDate", columnIndex, cal).result(delegate.getDate(columnIndex, cal));
	}

	@Override
	public Date getDate(String columnLabel, Calendar cal) throws SQLException {
		return TestEvents.record(this, "getDate", columnLabel, cal).result(delegate.getDate(columnLabel, cal));
	}

	@Override
	public Time getTime(int columnIndex, Calendar cal) throws SQLException {
		return TestEvents.record(this, "getTime", columnIndex, cal).result(delegate.getTime(columnIndex, cal));
	}

	@Override
	public Time getTime(String columnLabel, Calendar cal) throws SQLException {
		return TestEvents.record(this, "getTime", columnLabel, cal).result(delegate.getTime(columnLabel, cal));
	}

	@Override
	public Timestamp getTimestamp(int columnIndex, Calendar cal) throws SQLException {
		return TestEvents.record(this, "getTimestamp", columnIndex, cal)
				.result(delegate.getTimestamp(columnIndex, cal));
	}

	@Override
	public Timestamp getTimestamp(String columnLabel, Calendar cal) throws SQLException {
		return TestEvents.record(this, "getTimestamp", columnLabel, cal)
				.result(delegate.getTimestamp(columnLabel, cal));
	}

	@Override
	public URL getURL(int columnIndex) throws SQLException {
		return TestEvents.record(this, "getURL", columnIndex).result(delegate.getURL(columnIndex));
	}

	@Override
	public URL getURL(String columnLabel) throws SQLException {
		return TestEvents.record(this, "getURL", columnLabel).result(delegate.getURL(columnLabel));
	}

	@Override
	public RowId getRowId(int columnIndex) throws SQLException {
		return TestEvents.record(this, "getRowId", columnIndex).result(delegate.getRowId(columnIndex));
	}

	@Override
	public RowId getRowId(String columnLabel) throws SQLException {
		return TestEvents.record(this, "getRowId", columnLabel).result(delegate.getRowId(columnLabel));
	}

	@Override
	public boolean isClosed() throws SQLException {
		return TestEvents.record(this, "isClosed").result(delegate.isClosed());
	}

	@Override
	public NClob getNClob(int columnIndex) throws SQLException {
		return TestEvents.record(this, "getNClob", columnIndex).result(delegate.getNClob(columnIndex));
	}

	@Override
	public NClob getNClob(String columnLabel) throws SQLException {
		return TestEvents.record(this, "getNClob", columnLabel).result(delegate.getNClob(columnLabel));
	}

	@Override
	public SQLXML getSQLXML(int columnIndex) throws SQLException {
		return TestEvents.record(this, "getSQLXML", columnIndex).result(delegate.getSQLXML(columnIndex));
	}

	@Override
	public SQLXML getSQLXML(String columnLabel) throws SQLException {
		return TestEvents.record(this, "getSQLXML", columnLabel).result(delegate.getSQLXML(columnLabel));
	}

	@Override
	public String getNString(int columnIndex) throws SQLException {
		return TestEvents.record(this, "getNString", columnIndex).result(delegate.getNString(columnIndex));
	}

	@Override
	public String getNString(String columnLabel) throws SQLException {
		return TestEvents.record(this, "getNString", columnLabel).result(delegate.getNString(columnLabel));
	}

	@Override
	public Reader getNCharacterStream(int columnIndex) throws SQLException {
		return TestEvents.record(this, "getNCharacterStream", columnIndex)
				.result(delegate.getNCharacterStream(columnIndex));
	}

	@Override
	public Reader getNCharacterStream(String columnLabel) throws SQLException {
		return TestEvents.record(this, "getNCharacterStream", columnLabel)
				.result(delegate.getNCharacterStream(columnLabel));
	}

	@Override
	public <T> T getObject(int columnIndex, Class<T> type) throws SQLException {
		return TestEvents.record(this, "getObject", columnIndex, type).result(delegate.getObject(columnIndex, type));
	}

	@Override
	public <T> T getObject(String columnLabel, Class<T> type) throws SQLException {
		return TestEvents.record(this, "getObject", columnLabel, type).result(delegate.getObject(columnLabel, type));
	}

	@Override
	public void registerOutParameter(int parameterIndex, int sqlType) throws SQLException {
		TestEvents.record(this, "registerOutParameter", parameterIndex, sqlType);
		delegate.registerOutParameter(parameterIndex, sqlType);
	}

	@Override
	public void registerOutParameter(int parameterIndex, int sqlType, int scale) throws SQLException {
		TestEvents.record(this, "registerOutParameter", parameterIndex, sqlType, scale);
		delegate.registerOutParameter(parameterIndex, sqlType, scale);
	}

	@Override
	public void registerOutParameter(int parameterIndex, int sqlType, String typeName) throws SQLException {
		TestEvents.record(this, "registerOutParameter", parameterIndex, sqlType, typeName);
		delegate.registerOutParameter(parameterIndex, sqlType, typeName);
	}

	@Override
	public void registerOutParameter(String parameterName, int sqlType) throws SQLException {
		TestEvents.record(this, "registerOutParameter", parameterName, sqlType);
		delegate.registerOutParameter(parameterName, sqlType);
	}

	@Override
	public void registerOutParameter(String parameterName, int sqlType, int scale) throws SQLException {
		TestEvents.record(this, "registerOutParameter", parameterName, sqlType, scale);
		delegate.registerOutParameter(parameterName, sqlType, scale);
	}

	@Override
	public void registerOutParameter(String parameterName, int sqlType, String typeName) throws SQLException {
		TestEvents.record(this, "registerOutParameter", parameterName, sqlType, typeName);
		delegate.registerOutParameter(parameterName, sqlType, typeName);
	}

	@Override
	public void setURL(String parameterName, URL val) throws SQLException {
		TestEvents.record(this, "setURL", parameterName, val);
		delegate.setURL(parameterName, val);
	}

	@Override
	public void setNull(String parameterName, int sqlType) throws SQLException {
		TestEvents.record(this, "setURL", parameterName, sqlType);
		delegate.setNull(parameterName, sqlType);
	}

	@Override
	public void setBoolean(String parameterName, boolean x) throws SQLException {
		TestEvents.record(this, "setBoolean", parameterName, x);
		delegate.setBoolean(parameterName, x);
	}

	@Override
	public void setByte(String parameterName, byte x) throws SQLException {
		TestEvents.record(this, "setByte", parameterName, x);
		delegate.setByte(parameterName, x);
	}

	@Override
	public void setShort(String parameterName, short x) throws SQLException {
		TestEvents.record(this, "setShort", parameterName, x);
		delegate.setShort(parameterName, x);
	}

	@Override
	public void setInt(String parameterName, int x) throws SQLException {
		TestEvents.record(this, "setInt", parameterName, x);
		delegate.setInt(parameterName, x);
	}

	@Override
	public void setLong(String parameterName, long x) throws SQLException {
		TestEvents.record(this, "setLong", parameterName, x);
		delegate.setLong(parameterName, x);
	}

	@Override
	public void setFloat(String parameterName, float x) throws SQLException {
		TestEvents.record(this, "setFloat", parameterName, x);
		delegate.setFloat(parameterName, x);
	}

	@Override
	public void setDouble(String parameterName, double x) throws SQLException {
		TestEvents.record(this, "setDouble", parameterName, x);
		delegate.setDouble(parameterName, x);
	}

	@Override
	public void setBigDecimal(String parameterName, BigDecimal x) throws SQLException {
		TestEvents.record(this, "setBigDecimal", parameterName, x);
		delegate.setBigDecimal(parameterName, x);
	}

	@Override
	public void setString(String parameterName, String x) throws SQLException {
		TestEvents.record(this, "setString", parameterName, x);
		delegate.setString(parameterName, x);
	}

	@Override
	public void setBytes(String parameterName, byte[] x) throws SQLException {
		TestEvents.record(this, "setByte", parameterName, x);
		delegate.setBytes(parameterName, x);
	}

	@Override
	public void setDate(String parameterName, Date x) throws SQLException {
		TestEvents.record(this, "setDate", parameterName, x);
		delegate.setDate(parameterName, x);
	}

	@Override
	public void setTime(String parameterName, Time x) throws SQLException {
		TestEvents.record(this, "setTime", parameterName, x);
		delegate.setTime(parameterName, x);
	}

	@Override
	public void setTimestamp(String parameterName, Timestamp x) throws SQLException {
		TestEvents.record(this, "setTimestamp", parameterName, x);
		delegate.setTimestamp(parameterName, x);
	}

	@Override
	public void setAsciiStream(String parameterName, InputStream x, int length) throws SQLException {
		TestEvents.record(this, "setAsciiStream", parameterName, x);
		delegate.setAsciiStream(parameterName, x);
	}

	@Override
	public void setBinaryStream(String parameterName, InputStream x, int length) throws SQLException {
		TestEvents.record(this, "setBinaryStream", parameterName, x);
		delegate.setBinaryStream(parameterName, x);
	}

	@Override
	public void setObject(String parameterName, Object x, int targetSqlType, int scale) throws SQLException {
		TestEvents.record(this, "setObject", parameterName, x, targetSqlType, scale);
		delegate.setObject(parameterName, x, targetSqlType, scale);
	}

	@Override
	public void setObject(String parameterName, Object x, int targetSqlType) throws SQLException {
		TestEvents.record(this, "setObject", parameterName, x, targetSqlType);
		delegate.setObject(parameterName, x, targetSqlType);
	}

	@Override
	public void setObject(String parameterName, Object x) throws SQLException {
		TestEvents.record(this, "setObject", parameterName, x);
		delegate.setObject(parameterName, x);
	}

	@Override
	public void setCharacterStream(String parameterName, Reader reader, int length) throws SQLException {
		TestEvents.record(this, "setCharacterStream", parameterName, reader, length);
		delegate.setCharacterStream(parameterName, reader, length);
	}

	@Override
	public void setDate(String parameterName, Date x, Calendar cal) throws SQLException {
		TestEvents.record(this, "setDate", parameterName, x, cal);
		delegate.setDate(parameterName, x, cal);
	}

	@Override
	public void setTime(String parameterName, Time x, Calendar cal) throws SQLException {
		TestEvents.record(this, "setTime", parameterName, x, cal);
		delegate.setTime(parameterName, x, cal);
	}

	@Override
	public void setTimestamp(String parameterName, Timestamp x, Calendar cal) throws SQLException {
		TestEvents.record(this, "setTimestamp", parameterName, x, cal);
		delegate.setTimestamp(parameterName, x, cal);
	}

	@Override
	public void setNull(String parameterName, int sqlType, String typeName) throws SQLException {
		TestEvents.record(this, "setURL", parameterName, sqlType, typeName);
		delegate.setNull(parameterName, sqlType, typeName);
	}

	@Override
	public void setRowId(String parameterName, RowId x) throws SQLException {
		TestEvents.record(this, "setRowId", parameterName, x);
		delegate.setRowId(parameterName, x);
	}

	@Override
	public void setNString(String parameterName, String value) throws SQLException {
		TestEvents.record(this, "setNString", parameterName, value);
		delegate.setNString(parameterName, value);
	}

	@Override
	public void setNCharacterStream(String parameterName, Reader value, long length) throws SQLException {
		TestEvents.record(this, "setNCharacterStream", parameterName, value, length);
		delegate.setNCharacterStream(parameterName, value, length);
	}

	@Override
	public void setNClob(String parameterName, NClob value) throws SQLException {
		TestEvents.record(this, "setNClob", parameterName, value);
		delegate.setNClob(parameterName, value);
	}

	@Override
	public void setClob(String parameterName, Reader reader, long length) throws SQLException {
		TestEvents.record(this, "setClob", parameterName, reader, length);
		delegate.setClob(parameterName, reader, length);
	}

	@Override
	public void setBlob(String parameterName, InputStream inputStream, long length) throws SQLException {
		TestEvents.record(this, "setBlob", parameterName, inputStream, length);
		delegate.setBlob(parameterName, inputStream, length);
	}

	@Override
	public void setNClob(String parameterName, Reader reader, long length) throws SQLException {
		TestEvents.record(this, "setNClob", parameterName, reader, length);
		delegate.setNClob(parameterName, reader, length);
	}

	@Override
	public void setSQLXML(String parameterName, SQLXML xmlObject) throws SQLException {
		TestEvents.record(this, "setSQLXML", parameterName, xmlObject);
		delegate.setSQLXML(parameterName, xmlObject);
	}

	@Override
	public void setBlob(String parameterName, Blob x) throws SQLException {
		TestEvents.record(this, "setBlob", parameterName, x);
		delegate.setBlob(parameterName, x);
	}

	@Override
	public void setClob(String parameterName, Clob x) throws SQLException {
		TestEvents.record(this, "setClob", parameterName, x);
		delegate.setClob(parameterName, x);
	}

	@Override
	public void setAsciiStream(String parameterName, InputStream x, long length) throws SQLException {
		TestEvents.record(this, "setAsciiStream", parameterName, x, length);
		delegate.setAsciiStream(parameterName, x, length);
	}

	@Override
	public void setBinaryStream(String parameterName, InputStream x, long length) throws SQLException {
		TestEvents.record(this, "setBinaryStream", parameterName, x, length);
		delegate.setBinaryStream(parameterName, x, length);
	}

	@Override
	public void setCharacterStream(String parameterName, Reader reader, long length) throws SQLException {
		TestEvents.record(this, "setCharacterStream", parameterName, reader, length);
		delegate.setCharacterStream(parameterName, reader, length);
	}

	@Override
	public void setAsciiStream(String parameterName, InputStream x) throws SQLException {
		TestEvents.record(this, "setAsciiStream", parameterName, x);
		delegate.setAsciiStream(parameterName, x);
	}

	@Override
	public void setBinaryStream(String parameterName, InputStream x) throws SQLException {
		TestEvents.record(this, "setBinaryStream", parameterName, x);
		delegate.setBinaryStream(parameterName, x);
	}

	@Override
	public void setCharacterStream(String parameterName, Reader reader) throws SQLException {
		TestEvents.record(this, "setCharacterStream", parameterName, reader);
		delegate.setCharacterStream(parameterName, reader);
	}

	@Override
	public void setNCharacterStream(String parameterName, Reader value) throws SQLException {
		TestEvents.record(this, "setNCharacterStream", parameterName, value);
		delegate.setNCharacterStream(parameterName, value);
	}

	@Override
	public void setClob(String parameterName, Reader reader) throws SQLException {
		TestEvents.record(this, "setClob", parameterName, reader);
		delegate.setClob(parameterName, reader);
	}

	@Override
	public void setBlob(String parameterName, InputStream inputStream) throws SQLException {
		TestEvents.record(this, "setBlob", parameterName, inputStream);
		delegate.setBlob(parameterName, inputStream);
	}

	@Override
	public void setNClob(String parameterName, Reader reader) throws SQLException {
		TestEvents.record(this, "setNClob", parameterName, reader);
		delegate.setNClob(parameterName, reader);
	}

}
